// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/internal/pb/messaging.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ListApplicationsRequest is the request to a Routing.ListApplications() RPC.
type ListApplicationsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListApplicationsRequest) Reset()         { *m = ListApplicationsRequest{} }
func (m *ListApplicationsRequest) String() string { return proto.CompactTextString(m) }
func (*ListApplicationsRequest) ProtoMessage()    {}
func (*ListApplicationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_141cdf861d5078a2, []int{0}
}

func (m *ListApplicationsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListApplicationsRequest.Unmarshal(m, b)
}
func (m *ListApplicationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListApplicationsRequest.Marshal(b, m, deterministic)
}
func (m *ListApplicationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListApplicationsRequest.Merge(m, src)
}
func (m *ListApplicationsRequest) XXX_Size() int {
	return xxx_messageInfo_ListApplicationsRequest.Size(m)
}
func (m *ListApplicationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListApplicationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListApplicationsRequest proto.InternalMessageInfo

// ListApplicationsResponse is the response from a Routing.ListApplications() RPC.
type ListApplicationsResponse struct {
	// Applications is a list of applications hosted by the server.
	// satisfy the routing requirements of the caller.
	Applications         []*Application `protobuf:"bytes,1,rep,name=applications,proto3" json:"applications,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ListApplicationsResponse) Reset()         { *m = ListApplicationsResponse{} }
func (m *ListApplicationsResponse) String() string { return proto.CompactTextString(m) }
func (*ListApplicationsResponse) ProtoMessage()    {}
func (*ListApplicationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_141cdf861d5078a2, []int{1}
}

func (m *ListApplicationsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListApplicationsResponse.Unmarshal(m, b)
}
func (m *ListApplicationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListApplicationsResponse.Marshal(b, m, deterministic)
}
func (m *ListApplicationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListApplicationsResponse.Merge(m, src)
}
func (m *ListApplicationsResponse) XXX_Size() int {
	return xxx_messageInfo_ListApplicationsResponse.Size(m)
}
func (m *ListApplicationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListApplicationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListApplicationsResponse proto.InternalMessageInfo

func (m *ListApplicationsResponse) GetApplications() []*Application {
	if m != nil {
		return m.Applications
	}
	return nil
}

// ExecuteCommandRequest is the request to a Messaging.ExecuteCommand() RPC.
type ExecuteCommandRequest struct {
	// Application identifies which application the command is targetting.
	Application *Identity `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	// Envelope is a container for the command message.
	Envelope             *MessageEnvelope `protobuf:"bytes,2,opt,name=envelope,proto3" json:"envelope,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ExecuteCommandRequest) Reset()         { *m = ExecuteCommandRequest{} }
func (m *ExecuteCommandRequest) String() string { return proto.CompactTextString(m) }
func (*ExecuteCommandRequest) ProtoMessage()    {}
func (*ExecuteCommandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_141cdf861d5078a2, []int{2}
}

func (m *ExecuteCommandRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteCommandRequest.Unmarshal(m, b)
}
func (m *ExecuteCommandRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteCommandRequest.Marshal(b, m, deterministic)
}
func (m *ExecuteCommandRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteCommandRequest.Merge(m, src)
}
func (m *ExecuteCommandRequest) XXX_Size() int {
	return xxx_messageInfo_ExecuteCommandRequest.Size(m)
}
func (m *ExecuteCommandRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteCommandRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteCommandRequest proto.InternalMessageInfo

func (m *ExecuteCommandRequest) GetApplication() *Identity {
	if m != nil {
		return m.Application
	}
	return nil
}

func (m *ExecuteCommandRequest) GetEnvelope() *MessageEnvelope {
	if m != nil {
		return m.Envelope
	}
	return nil
}

// ExecuteCommandResponse is the response from a Messaging.ExecuteCommand() RPC.
type ExecuteCommandResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecuteCommandResponse) Reset()         { *m = ExecuteCommandResponse{} }
func (m *ExecuteCommandResponse) String() string { return proto.CompactTextString(m) }
func (*ExecuteCommandResponse) ProtoMessage()    {}
func (*ExecuteCommandResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_141cdf861d5078a2, []int{3}
}

func (m *ExecuteCommandResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteCommandResponse.Unmarshal(m, b)
}
func (m *ExecuteCommandResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteCommandResponse.Marshal(b, m, deterministic)
}
func (m *ExecuteCommandResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteCommandResponse.Merge(m, src)
}
func (m *ExecuteCommandResponse) XXX_Size() int {
	return xxx_messageInfo_ExecuteCommandResponse.Size(m)
}
func (m *ExecuteCommandResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteCommandResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteCommandResponse proto.InternalMessageInfo

// ConsumeEventsRequest is the request to a Messaging.ConsumeEvents() RPC.
type ConsumeEventsRequest struct {
	// Application identifies which application's stream to consume from.
	Application *Identity `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	// Offset is the offset of the first event to consume.
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// Events is a list of protocol-names for foreign events that the caller
	// wishes to consume.
	Events               []string `protobuf:"bytes,3,rep,name=events,proto3" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConsumeEventsRequest) Reset()         { *m = ConsumeEventsRequest{} }
func (m *ConsumeEventsRequest) String() string { return proto.CompactTextString(m) }
func (*ConsumeEventsRequest) ProtoMessage()    {}
func (*ConsumeEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_141cdf861d5078a2, []int{4}
}

func (m *ConsumeEventsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsumeEventsRequest.Unmarshal(m, b)
}
func (m *ConsumeEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsumeEventsRequest.Marshal(b, m, deterministic)
}
func (m *ConsumeEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumeEventsRequest.Merge(m, src)
}
func (m *ConsumeEventsRequest) XXX_Size() int {
	return xxx_messageInfo_ConsumeEventsRequest.Size(m)
}
func (m *ConsumeEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumeEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumeEventsRequest proto.InternalMessageInfo

func (m *ConsumeEventsRequest) GetApplication() *Identity {
	if m != nil {
		return m.Application
	}
	return nil
}

func (m *ConsumeEventsRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ConsumeEventsRequest) GetEvents() []string {
	if m != nil {
		return m.Events
	}
	return nil
}

// ConsumeEventsResponse is the response from a Messaging.ConsumeEvents() RPC.
type ConsumeEventsResponse struct {
	// Offset is the offset of message within the source application's stream.
	Offset uint64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// Envelope is a container for the message.
	Envelope             *MessageEnvelope `protobuf:"bytes,2,opt,name=envelope,proto3" json:"envelope,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ConsumeEventsResponse) Reset()         { *m = ConsumeEventsResponse{} }
func (m *ConsumeEventsResponse) String() string { return proto.CompactTextString(m) }
func (*ConsumeEventsResponse) ProtoMessage()    {}
func (*ConsumeEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_141cdf861d5078a2, []int{5}
}

func (m *ConsumeEventsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsumeEventsResponse.Unmarshal(m, b)
}
func (m *ConsumeEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsumeEventsResponse.Marshal(b, m, deterministic)
}
func (m *ConsumeEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumeEventsResponse.Merge(m, src)
}
func (m *ConsumeEventsResponse) XXX_Size() int {
	return xxx_messageInfo_ConsumeEventsResponse.Size(m)
}
func (m *ConsumeEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumeEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumeEventsResponse proto.InternalMessageInfo

func (m *ConsumeEventsResponse) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ConsumeEventsResponse) GetEnvelope() *MessageEnvelope {
	if m != nil {
		return m.Envelope
	}
	return nil
}

func init() {
	proto.RegisterType((*ListApplicationsRequest)(nil), "dogma.api.messaging.v1.ListApplicationsRequest")
	proto.RegisterType((*ListApplicationsResponse)(nil), "dogma.api.messaging.v1.ListApplicationsResponse")
	proto.RegisterType((*ExecuteCommandRequest)(nil), "dogma.api.messaging.v1.ExecuteCommandRequest")
	proto.RegisterType((*ExecuteCommandResponse)(nil), "dogma.api.messaging.v1.ExecuteCommandResponse")
	proto.RegisterType((*ConsumeEventsRequest)(nil), "dogma.api.messaging.v1.ConsumeEventsRequest")
	proto.RegisterType((*ConsumeEventsResponse)(nil), "dogma.api.messaging.v1.ConsumeEventsResponse")
}

func init() { proto.RegisterFile("api/internal/pb/messaging.proto", fileDescriptor_141cdf861d5078a2) }

var fileDescriptor_141cdf861d5078a2 = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xd1, 0x4e, 0xea, 0x40,
	0x10, 0x86, 0x53, 0x38, 0x21, 0x87, 0xe5, 0x9c, 0x93, 0x93, 0x8d, 0x60, 0x6d, 0xa2, 0xd6, 0x7a,
	0x21, 0x46, 0x69, 0x11, 0x9f, 0x40, 0x08, 0x31, 0x26, 0x72, 0xd3, 0x4b, 0xef, 0x96, 0x32, 0xd4,
	0x4d, 0xe8, 0xee, 0xc2, 0x6e, 0x09, 0xbe, 0x82, 0x4f, 0xe1, 0xbb, 0xf9, 0x22, 0xc6, 0x76, 0x95,
	0xb6, 0xb6, 0x09, 0x17, 0x5c, 0xee, 0xce, 0xfc, 0xdf, 0xfc, 0x33, 0x3b, 0x8b, 0x4e, 0x89, 0xa0,
	0x1e, 0x65, 0x0a, 0x56, 0x8c, 0x2c, 0x3c, 0x31, 0xf5, 0x22, 0x90, 0x92, 0x84, 0x94, 0x85, 0xae,
	0x58, 0x71, 0xc5, 0x71, 0x67, 0xc6, 0xc3, 0x88, 0xb8, 0x44, 0x50, 0x77, 0x1b, 0x5a, 0xdf, 0x58,
	0x67, 0x45, 0x21, 0x11, 0x62, 0x41, 0x03, 0xa2, 0x28, 0x67, 0xa9, 0xd4, 0x3a, 0x2e, 0x67, 0x83,
	0x0e, 0x9f, 0x14, 0xc3, 0x74, 0x06, 0x4c, 0x51, 0xf5, 0x92, 0xc6, 0x9d, 0x23, 0x74, 0xf8, 0x48,
	0xa5, 0xba, 0xdb, 0x72, 0xa5, 0x0f, 0xcb, 0x18, 0xa4, 0x72, 0x02, 0x64, 0xfe, 0x0c, 0x49, 0xc1,
	0x99, 0x04, 0x7c, 0x8f, 0xfe, 0x64, 0xac, 0x48, 0xd3, 0xb0, 0xeb, 0xdd, 0xd6, 0xe0, 0xdc, 0x2d,
	0xef, 0xc3, 0xcd, 0x30, 0xfc, 0x9c, 0xd0, 0x79, 0x33, 0x50, 0x7b, 0xbc, 0x81, 0x20, 0x56, 0x30,
	0xe2, 0x51, 0x44, 0xd8, 0x4c, 0x97, 0xc7, 0x43, 0xd4, 0xca, 0x64, 0x9a, 0x86, 0x6d, 0x74, 0x5b,
	0x03, 0xbb, 0xaa, 0xc2, 0x83, 0x6e, 0xcb, 0xcf, 0x8a, 0xf0, 0x08, 0xfd, 0x06, 0xb6, 0x86, 0x05,
	0x17, 0x60, 0xd6, 0x12, 0xc0, 0x45, 0x15, 0x60, 0x92, 0x8e, 0x6d, 0xac, 0xd3, 0xfd, 0x6f, 0xa1,
	0x63, 0xa2, 0x4e, 0xd1, 0x61, 0x3a, 0x05, 0xe7, 0xd5, 0x40, 0x07, 0x23, 0xce, 0x64, 0x1c, 0xc1,
	0x78, 0x0d, 0x4c, 0xc9, 0x7d, 0x7a, 0xef, 0xa0, 0x06, 0x9f, 0xcf, 0x25, 0xa8, 0xc4, 0xf9, 0x2f,
	0x5f, 0x9f, 0x3e, 0xef, 0x21, 0x29, 0x66, 0xd6, 0xed, 0x7a, 0xb7, 0xe9, 0xeb, 0x93, 0xa3, 0x50,
	0xbb, 0xe0, 0x45, 0xbf, 0xd5, 0x16, 0x64, 0xe4, 0x40, 0xfb, 0x18, 0xce, 0xe0, 0xbd, 0x86, 0x9a,
	0x93, 0xaf, 0x54, 0x1c, 0xa3, 0xff, 0xc5, 0x95, 0xc1, 0x5e, 0x15, 0xb4, 0x62, 0xef, 0xac, 0xfe,
	0xee, 0x02, 0xdd, 0x21, 0x47, 0xff, 0xf2, 0x2f, 0x84, 0x7b, 0x55, 0x8c, 0xd2, 0x5d, 0xb3, 0xdc,
	0x5d, 0xd3, 0x75, 0x41, 0x86, 0xfe, 0xe6, 0x66, 0x8d, 0xaf, 0xab, 0x00, 0x65, 0xeb, 0x61, 0xf5,
	0x76, 0xcc, 0x4e, 0xab, 0xf5, 0x8d, 0xe1, 0xd5, 0xd3, 0x65, 0x48, 0xd5, 0x73, 0x3c, 0x75, 0x03,
	0x1e, 0x79, 0x89, 0x58, 0xd1, 0xa5, 0x47, 0xd9, 0x9c, 0x6e, 0xbc, 0xc2, 0x0f, 0x9f, 0x36, 0x92,
	0x9f, 0x7d, 0xfb, 0x11, 0x00, 0x00, 0xff, 0xff, 0x41, 0x7b, 0x86, 0x2d, 0x76, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MessagingClient is the client API for Messaging service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessagingClient interface {
	// ListApplications returns a list of applications hosted by the server, along
	// with the commands and events that they execute and record, respectively.
	ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (*ListApplicationsResponse, error)
	// ExecuteCommand executes a command message.
	ExecuteCommand(ctx context.Context, in *ExecuteCommandRequest, opts ...grpc.CallOption) (*ExecuteCommandResponse, error)
	// ConsumesEvents streams events from an applications event stream.
	ConsumeEvents(ctx context.Context, in *ConsumeEventsRequest, opts ...grpc.CallOption) (Messaging_ConsumeEventsClient, error)
}

type messagingClient struct {
	cc grpc.ClientConnInterface
}

func NewMessagingClient(cc grpc.ClientConnInterface) MessagingClient {
	return &messagingClient{cc}
}

func (c *messagingClient) ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (*ListApplicationsResponse, error) {
	out := new(ListApplicationsResponse)
	err := c.cc.Invoke(ctx, "/dogma.api.messaging.v1.Messaging/ListApplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) ExecuteCommand(ctx context.Context, in *ExecuteCommandRequest, opts ...grpc.CallOption) (*ExecuteCommandResponse, error) {
	out := new(ExecuteCommandResponse)
	err := c.cc.Invoke(ctx, "/dogma.api.messaging.v1.Messaging/ExecuteCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) ConsumeEvents(ctx context.Context, in *ConsumeEventsRequest, opts ...grpc.CallOption) (Messaging_ConsumeEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Messaging_serviceDesc.Streams[0], "/dogma.api.messaging.v1.Messaging/ConsumeEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagingConsumeEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Messaging_ConsumeEventsClient interface {
	Recv() (*ConsumeEventsResponse, error)
	grpc.ClientStream
}

type messagingConsumeEventsClient struct {
	grpc.ClientStream
}

func (x *messagingConsumeEventsClient) Recv() (*ConsumeEventsResponse, error) {
	m := new(ConsumeEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessagingServer is the server API for Messaging service.
type MessagingServer interface {
	// ListApplications returns a list of applications hosted by the server, along
	// with the commands and events that they execute and record, respectively.
	ListApplications(context.Context, *ListApplicationsRequest) (*ListApplicationsResponse, error)
	// ExecuteCommand executes a command message.
	ExecuteCommand(context.Context, *ExecuteCommandRequest) (*ExecuteCommandResponse, error)
	// ConsumesEvents streams events from an applications event stream.
	ConsumeEvents(*ConsumeEventsRequest, Messaging_ConsumeEventsServer) error
}

// UnimplementedMessagingServer can be embedded to have forward compatible implementations.
type UnimplementedMessagingServer struct {
}

func (*UnimplementedMessagingServer) ListApplications(ctx context.Context, req *ListApplicationsRequest) (*ListApplicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApplications not implemented")
}
func (*UnimplementedMessagingServer) ExecuteCommand(ctx context.Context, req *ExecuteCommandRequest) (*ExecuteCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteCommand not implemented")
}
func (*UnimplementedMessagingServer) ConsumeEvents(req *ConsumeEventsRequest, srv Messaging_ConsumeEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method ConsumeEvents not implemented")
}

func RegisterMessagingServer(s *grpc.Server, srv MessagingServer) {
	s.RegisterService(&_Messaging_serviceDesc, srv)
}

func _Messaging_ListApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).ListApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dogma.api.messaging.v1.Messaging/ListApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).ListApplications(ctx, req.(*ListApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_ExecuteCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).ExecuteCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dogma.api.messaging.v1.Messaging/ExecuteCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).ExecuteCommand(ctx, req.(*ExecuteCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_ConsumeEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConsumeEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagingServer).ConsumeEvents(m, &messagingConsumeEventsServer{stream})
}

type Messaging_ConsumeEventsServer interface {
	Send(*ConsumeEventsResponse) error
	grpc.ServerStream
}

type messagingConsumeEventsServer struct {
	grpc.ServerStream
}

func (x *messagingConsumeEventsServer) Send(m *ConsumeEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Messaging_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dogma.api.messaging.v1.Messaging",
	HandlerType: (*MessagingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListApplications",
			Handler:    _Messaging_ListApplications_Handler,
		},
		{
			MethodName: "ExecuteCommand",
			Handler:    _Messaging_ExecuteCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConsumeEvents",
			Handler:       _Messaging_ConsumeEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/internal/pb/messaging.proto",
}
