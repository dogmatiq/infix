syntax = "proto3";
package dogma.api.messaging.v1;

import "api/internal/pb/application.proto";
import "api/internal/pb/message.proto";
import "api/internal/pb/identity.proto";

option go_package = "github.com/dogmatiq/infix/api/internal/pb";

// The Messaging service is used to communicate messages between applications.
service Messaging {
  // ListApplications returns a list of applications hosted by the server, along
  // with the commands and events that they execute and record, respectively.
  rpc ListApplications(ListApplicationsRequest) returns (ListApplicationsResponse);

  // ExecuteCommand executes a command message.
  rpc ExecuteCommand(ExecuteCommandRequest) returns (ExecuteCommandResponse);

  // ConsumesEvents streams events from an applications event stream.
  rpc ConsumeEvents(ConsumeEventsRequest) returns (stream ConsumeEventsResponse);
}

// ListApplicationsRequest is the request to a Routing.ListApplications() RPC.
message ListApplicationsRequest {
}

// ListApplicationsResponse is the response from a Routing.ListApplications() RPC.
message ListApplicationsResponse {
  // Applications is a list of applications hosted by the server.
  // satisfy the routing requirements of the caller.
  repeated Application applications = 1;
}

// ExecuteCommandRequest is the request to a Messaging.ExecuteCommand() RPC.
message ExecuteCommandRequest {
  // Application identifies which application the command is targetting.
  Identity application = 1;

  // Envelope is a container for the command message.
  MessageEnvelope envelope = 2;
}

// ExecuteCommandResponse is the response from a Messaging.ExecuteCommand() RPC.
message ExecuteCommandResponse {
}

// ConsumeEventsRequest is the request to a Messaging.ConsumeEvents() RPC.
message ConsumeEventsRequest {
  // Application identifies which application's stream to consume from.
  Identity application = 1;

  // Offset is the offset of the first event to consume.
  uint64 offset = 2;

  // Events is a list of protocol-names for foreign events that the caller
  // wishes to consume.
  repeated string events = 3;
}

// ConsumeEventsResponse is the response from a Messaging.ConsumeEvents() RPC.
message ConsumeEventsResponse {
  // Offset is the offset of message within the source application's stream.
  uint64 offset = 1;

  // Envelope is a container for the message.
  MessageEnvelope envelope = 2;
}
